<!--

    SPDX-License-Identifier: CC0-1.0

    Copyright 2018-2020 Will Sargent.

    Licensed under the CC0 Public Domain Dedication;
    You may obtain a copy of the License at

        http://creativecommons.org/publicdomain/zero/1.0/

-->
<included>

    <!-- loosen rule to include for encoders as well as just top level -->
    <newRule pattern="*/include"
             actionClass="ch.qos.logback.core.joran.action.IncludeAction"/>

    <!-- loosen the rule on appender refs so appenders can reference them -->
    <newRule pattern="*/appender/appender-ref"
             actionClass="ch.qos.logback.core.joran.action.AppenderRefAction"/>

    <newRule pattern="*/typesafeConfig"
             actionClass="com.tersesystems.logback.typesafeconfig.TypesafeConfigAction"/>

    <typesafeConfig>
        <object name="highlightMap" path="highlight" scope="context"/>
    </typesafeConfig>

    <!-- playframework already adds a context listener -->
    <!--    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">-->
    <!--        <resetJUL>true</resetJUL>-->
    <!--    </contextListener>-->

    <jmxConfigurator/>

    <!-- give the async appenders time to shutdown -->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook">
        <delay>${shutdownHook.delay}</delay>
    </shutdownHook>

    <!-- highlight based on context map -->
    <conversionRule conversionWord="terseHighlight"
                    converterClass="com.tersesystems.logback.classic.TerseHighlightConverter"/>

    <conversionRule conversionWord="startTime" converterClass="com.tersesystems.logback.classic.StartTimeConverter"/>

    <conversionRule conversionWord="nanoTime"
                    converterClass="com.tersesystems.logback.classic.NanoTimeConverter"/>

    <!-- time since epoch -->
    <conversionRule conversionWord="tse" converterClass="com.tersesystems.logback.classic.TimeSinceEpochConverter"/>

    <!-- nested exception messages -->
    <conversionRule conversionWord="exmessage"
                    converterClass="com.tersesystems.logback.classic.ExceptionMessageConverter"/>

    <!-- unique id extractor -->
    <conversionRule conversionWord="uniqueId" converterClass="com.tersesystems.logback.uniqueid.UniqueIdConverter"/>

    <!--
    https://github.com/logstash/logstash-logback-encoder/blob/master/src/main/java/net/logstash/logback/stacktrace/ShortenedThrowableConverter.java#L58

    Options can be specified in the pattern in the following order:
       - maxDepthPerThrowable = "full" or "short" or an integer value
       - shortenedClassNameLength = "full" or "short" or an integer value
       - maxLength = "full" or "short" or an integer value

       %msg%n%stack{5,1024,10,rootFirst,regex1,regex2,evaluatorName}
    -->
    <conversionRule conversionWord="stack"
                    converterClass="net.logstash.logback.stacktrace.ShortenedThrowableConverter"/>

</included>